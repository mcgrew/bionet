/*

This file is part of JSysNet.

JSysNet is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

JSysNet is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with JSysNet.  If not, see <http://www.gnu.org/licenses/>.

*/

package edu.purdue.jsysnet.io;

import edu.purdue.jsysnet.util.Molecule;

import java.util.Iterator;
import java.util.Collection;
import java.util.TreeSet;
import java.util.regex.Pattern;
import java.util.Arrays;
import java.nio.CharBuffer;
import java.io.Reader;

public class ArffMoleculeReader extends Reader {
	Collection <Molecule> molecules;
	Iterator<Molecule> moleculeIterator;
	StringBuilder buffer;
	Collection<String> attributes;
	Pattern samplePattern;

	public ArffMoleculeReader ( Collection<Molecule> molecules ) {
		this.molecules = molecules;
		this.reset( );
		samplePattern = Pattern.compile( "^[Ss][0-9]*$" );
		if ( this.moleculeIterator.hasNext( )) {
			Molecule m = this.moleculeIterator.next( );
			buffer.append( "% Generated by JSysNet\n" +
			               "@RELATION Molecules\n\n" );
			this.attributes = new TreeSet( Arrays.asList( m.getAttributeNames( )));
			for ( String att : m.getAttributeNames( )) {
				buffer.append( String.format( "@ATTRIBUTE %s ", att ));
				if ( isNumeric( att )) 
					buffer.append( "NUMERIC\n" );
				else
					buffer.append( "STRING\n" );
			}
			this.buffer.append( "\n@DATA\n" );
			this.appendToBuffer( m );
		}
	}

	public void close( ) { 
		moleculeIterator = null;
		molecules = null;
	}


	public int read( ) {
		char returnValue = buffer.charAt( 0 );
		buffer.deleteCharAt( 0 );
		return (int)returnValue;
	}

	public int read( char[] cbuf ) {
		return read( cbuf, 0, cbuf.length );
	}

	public int read( char[] cbuf, int off, int len ) {
		// clear the character buffer
		for( int i=0; i < cbuf.length; i++ )
			cbuf[ i ] = '\0';
		while( len > this.buffer.length( ) && this.bufferNext( ));
		len = Math.min( len, this.buffer.length( ));
		if ( len > 0 ) {
			buffer.getChars( 0, off+len, cbuf, off );
			buffer.delete( 0, len );
		}
		return len;
	}

	public int read( CharBuffer target ) {
		int len = target.length( );
		while ( len > this.buffer.length( ) && this.bufferNext( ));
		len = Math.min( target.length( ), this.buffer.length( ));
		char [] transferBuffer = new char[ len ];
		buffer.getChars( 0, len, transferBuffer, 0 );
		target.put( transferBuffer );
		buffer.delete( 0, len );
		return len;
	}

	public boolean ready( ) {
		return true;
	}

	public void reset( ) {
		moleculeIterator = this.molecules.iterator( );
		buffer = new StringBuilder( );
	}

	public long skip( long n ) {
		long remaining = n;
		while ( remaining > this.buffer.length( )) {
			remaining -= this.buffer.length( );
			buffer.setLength( 0 );
			if ( !this.bufferNext( ))
				return n - remaining;
		}
		buffer.delete( 0, (int)remaining );
		return n;
	}

	private boolean bufferNext( ) {
		if ( !moleculeIterator.hasNext( ))
			return false;
		Molecule m = moleculeIterator.next( );
		this.appendToBuffer( m );
		return true;
	}

	private void appendToBuffer( Molecule m ) {
		for( String att : this.attributes ) {
			if ( isNumeric( att ))
				buffer.append( m.getAttribute( att ) + "," );
			else
				 buffer.append( String.format( "\"%s\",", m.getAttribute( att )));
		}
		buffer.setCharAt( buffer.length( )-1, '\n' );
	}

	private boolean isNumeric( String attribute ) {
		return "mw".equals( attribute ) || this.samplePattern.matcher( attribute ).matches( );
	}
}



